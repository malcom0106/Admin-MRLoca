//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Admin_MRLoca
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MRLocaEntities : DbContext
    {
        public MRLocaEntities()
            : base("name=MRLocaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<Adresse> Adresses { get; set; }
        public virtual DbSet<Avi> Avis { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Departement> Departements { get; set; }
        public virtual DbSet<DispoHeberg> DispoHebergs { get; set; }
        public virtual DbSet<Favori> Favoris { get; set; }
        public virtual DbSet<Hebergement> Hebergements { get; set; }
        public virtual DbSet<LogSQL> LogSQLs { get; set; }
        public virtual DbSet<Messagerie> Messageries { get; set; }
        public virtual DbSet<ModePaiement> ModePaiements { get; set; }
        public virtual DbSet<Reservation> Reservations { get; set; }
        public virtual DbSet<Saison> Saisons { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TypeLgt> TypeLgts { get; set; }
    
        public virtual int sp_AddFavori(Nullable<int> idClient, Nullable<int> idHebergement)
        {
            var idClientParameter = idClient.HasValue ?
                new ObjectParameter("IdClient", idClient) :
                new ObjectParameter("IdClient", typeof(int));
    
            var idHebergementParameter = idHebergement.HasValue ?
                new ObjectParameter("IdHebergement", idHebergement) :
                new ObjectParameter("IdHebergement", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddFavori", idClientParameter, idHebergementParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_DelAdresse(Nullable<int> idAdresse)
        {
            var idAdresseParameter = idAdresse.HasValue ?
                new ObjectParameter("IdAdresse", idAdresse) :
                new ObjectParameter("IdAdresse", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DelAdresse", idAdresseParameter);
        }
    
        public virtual int sp_DelFavori(Nullable<int> client, Nullable<int> idHebergement)
        {
            var clientParameter = client.HasValue ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(int));
    
            var idHebergementParameter = idHebergement.HasValue ?
                new ObjectParameter("IdHebergement", idHebergement) :
                new ObjectParameter("IdHebergement", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DelFavori", clientParameter, idHebergementParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_GetAdresse_Result> sp_GetAdresse(Nullable<int> idAdresse)
        {
            var idAdresseParameter = idAdresse.HasValue ?
                new ObjectParameter("IdAdresse", idAdresse) :
                new ObjectParameter("IdAdresse", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAdresse_Result>("sp_GetAdresse", idAdresseParameter);
        }
    
        public virtual ObjectResult<sp_GetAdressesClient_Result> sp_GetAdressesClient(Nullable<int> idClient)
        {
            var idClientParameter = idClient.HasValue ?
                new ObjectParameter("IdClient", idClient) :
                new ObjectParameter("IdClient", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAdressesClient_Result>("sp_GetAdressesClient", idClientParameter);
        }
    
        public virtual ObjectResult<sp_GetAllHebergements_Result> sp_GetAllHebergements()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllHebergements_Result>("sp_GetAllHebergements");
        }
    
        public virtual ObjectResult<sp_getClient_Result> sp_getClient(string login, string password)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getClient_Result>("sp_getClient", loginParameter, passwordParameter);
        }
    
        public virtual ObjectResult<sp_GetCommande_Result> sp_GetCommande(Nullable<int> idClient)
        {
            var idClientParameter = idClient.HasValue ?
                new ObjectParameter("IdClient", idClient) :
                new ObjectParameter("IdClient", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCommande_Result>("sp_GetCommande", idClientParameter);
        }
    
        public virtual ObjectResult<sp_GetFavoris_Result> sp_GetFavoris(Nullable<int> idClient)
        {
            var idClientParameter = idClient.HasValue ?
                new ObjectParameter("IdClient", idClient) :
                new ObjectParameter("IdClient", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFavoris_Result>("sp_GetFavoris", idClientParameter);
        }
    
        public virtual ObjectResult<sp_GetHebergement_Result> sp_GetHebergement(Nullable<int> idHebergement)
        {
            var idHebergementParameter = idHebergement.HasValue ?
                new ObjectParameter("IdHebergement", idHebergement) :
                new ObjectParameter("IdHebergement", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetHebergement_Result>("sp_GetHebergement", idHebergementParameter);
        }
    
        public virtual ObjectResult<sp_GetHebergementProprietaire_Result> sp_GetHebergementProprietaire(Nullable<int> idClient)
        {
            var idClientParameter = idClient.HasValue ?
                new ObjectParameter("IdClient", idClient) :
                new ObjectParameter("IdClient", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetHebergementProprietaire_Result>("sp_GetHebergementProprietaire", idClientParameter);
        }
    
        public virtual ObjectResult<sp_GetHebergementRecherche_Result> sp_GetHebergementRecherche(string departement, string type)
        {
            var departementParameter = departement != null ?
                new ObjectParameter("Departement", departement) :
                new ObjectParameter("Departement", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetHebergementRecherche_Result>("sp_GetHebergementRecherche", departementParameter, typeParameter);
        }
    
        public virtual ObjectResult<sp_GetMessagesClient_Result> sp_GetMessagesClient(Nullable<int> idClient)
        {
            var idClientParameter = idClient.HasValue ?
                new ObjectParameter("IdClient", idClient) :
                new ObjectParameter("IdClient", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetMessagesClient_Result>("sp_GetMessagesClient", idClientParameter);
        }
    
        public virtual ObjectResult<sp_GetUtilisateurId_Result> sp_GetUtilisateurId(Nullable<int> idClient)
        {
            var idClientParameter = idClient.HasValue ?
                new ObjectParameter("IdClient", idClient) :
                new ObjectParameter("IdClient", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUtilisateurId_Result>("sp_GetUtilisateurId", idClientParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_InsertAdresse(Nullable<int> idClient, string nomAdresse, string numero, string voie, string codePostal, string ville)
        {
            var idClientParameter = idClient.HasValue ?
                new ObjectParameter("IdClient", idClient) :
                new ObjectParameter("IdClient", typeof(int));
    
            var nomAdresseParameter = nomAdresse != null ?
                new ObjectParameter("NomAdresse", nomAdresse) :
                new ObjectParameter("NomAdresse", typeof(string));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("Numero", numero) :
                new ObjectParameter("Numero", typeof(string));
    
            var voieParameter = voie != null ?
                new ObjectParameter("Voie", voie) :
                new ObjectParameter("Voie", typeof(string));
    
            var codePostalParameter = codePostal != null ?
                new ObjectParameter("CodePostal", codePostal) :
                new ObjectParameter("CodePostal", typeof(string));
    
            var villeParameter = ville != null ?
                new ObjectParameter("Ville", ville) :
                new ObjectParameter("Ville", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertAdresse", idClientParameter, nomAdresseParameter, numeroParameter, voieParameter, codePostalParameter, villeParameter);
        }
    
        public virtual int sp_InsertMessage(Nullable<int> idExpediteur, Nullable<int> idDestinataire, string message)
        {
            var idExpediteurParameter = idExpediteur.HasValue ?
                new ObjectParameter("IdExpediteur", idExpediteur) :
                new ObjectParameter("IdExpediteur", typeof(int));
    
            var idDestinataireParameter = idDestinataire.HasValue ?
                new ObjectParameter("IdDestinataire", idDestinataire) :
                new ObjectParameter("IdDestinataire", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertMessage", idExpediteurParameter, idDestinataireParameter, messageParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_setAdresse(string nom, string numero, string voie, string codepostal, string ville)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("nom", nom) :
                new ObjectParameter("nom", typeof(string));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(string));
    
            var voieParameter = voie != null ?
                new ObjectParameter("voie", voie) :
                new ObjectParameter("voie", typeof(string));
    
            var codepostalParameter = codepostal != null ?
                new ObjectParameter("codepostal", codepostal) :
                new ObjectParameter("codepostal", typeof(string));
    
            var villeParameter = ville != null ?
                new ObjectParameter("ville", ville) :
                new ObjectParameter("ville", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_setAdresse", nomParameter, numeroParameter, voieParameter, codepostalParameter, villeParameter);
        }
    
        public virtual int sp_setClient(string nom, string prenom, string login, string password, string email, string telephone, Nullable<bool> type, string nomAdresse, string numero, string voie, string codepostal, string ville)
        {
            var nomParameter = nom != null ?
                new ObjectParameter("nom", nom) :
                new ObjectParameter("nom", typeof(string));
    
            var prenomParameter = prenom != null ?
                new ObjectParameter("prenom", prenom) :
                new ObjectParameter("prenom", typeof(string));
    
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("telephone", telephone) :
                new ObjectParameter("telephone", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(bool));
    
            var nomAdresseParameter = nomAdresse != null ?
                new ObjectParameter("nomAdresse", nomAdresse) :
                new ObjectParameter("nomAdresse", typeof(string));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("numero", numero) :
                new ObjectParameter("numero", typeof(string));
    
            var voieParameter = voie != null ?
                new ObjectParameter("voie", voie) :
                new ObjectParameter("voie", typeof(string));
    
            var codepostalParameter = codepostal != null ?
                new ObjectParameter("codepostal", codepostal) :
                new ObjectParameter("codepostal", typeof(string));
    
            var villeParameter = ville != null ?
                new ObjectParameter("ville", ville) :
                new ObjectParameter("ville", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_setClient", nomParameter, prenomParameter, loginParameter, passwordParameter, emailParameter, telephoneParameter, typeParameter, nomAdresseParameter, numeroParameter, voieParameter, codepostalParameter, villeParameter);
        }
    
        public virtual int sp_SetReservation(Nullable<int> idClient, Nullable<int> idHebergement, Nullable<System.DateTime> dateDebut, Nullable<System.DateTime> dateFin, Nullable<bool> statut, string prixTotal, Nullable<int> modePaiement)
        {
            var idClientParameter = idClient.HasValue ?
                new ObjectParameter("IdClient", idClient) :
                new ObjectParameter("IdClient", typeof(int));
    
            var idHebergementParameter = idHebergement.HasValue ?
                new ObjectParameter("IdHebergement", idHebergement) :
                new ObjectParameter("IdHebergement", typeof(int));
    
            var dateDebutParameter = dateDebut.HasValue ?
                new ObjectParameter("DateDebut", dateDebut) :
                new ObjectParameter("DateDebut", typeof(System.DateTime));
    
            var dateFinParameter = dateFin.HasValue ?
                new ObjectParameter("DateFin", dateFin) :
                new ObjectParameter("DateFin", typeof(System.DateTime));
    
            var statutParameter = statut.HasValue ?
                new ObjectParameter("Statut", statut) :
                new ObjectParameter("Statut", typeof(bool));
    
            var prixTotalParameter = prixTotal != null ?
                new ObjectParameter("PrixTotal", prixTotal) :
                new ObjectParameter("PrixTotal", typeof(string));
    
            var modePaiementParameter = modePaiement.HasValue ?
                new ObjectParameter("ModePaiement", modePaiement) :
                new ObjectParameter("ModePaiement", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SetReservation", idClientParameter, idHebergementParameter, dateDebutParameter, dateFinParameter, statutParameter, prixTotalParameter, modePaiementParameter);
        }
    
        public virtual int sp_UpdateAdresse(Nullable<int> idAdresse, string nomAdresse, string numero, string voie, string codePostal, string ville)
        {
            var idAdresseParameter = idAdresse.HasValue ?
                new ObjectParameter("IdAdresse", idAdresse) :
                new ObjectParameter("IdAdresse", typeof(int));
    
            var nomAdresseParameter = nomAdresse != null ?
                new ObjectParameter("NomAdresse", nomAdresse) :
                new ObjectParameter("NomAdresse", typeof(string));
    
            var numeroParameter = numero != null ?
                new ObjectParameter("Numero", numero) :
                new ObjectParameter("Numero", typeof(string));
    
            var voieParameter = voie != null ?
                new ObjectParameter("Voie", voie) :
                new ObjectParameter("Voie", typeof(string));
    
            var codePostalParameter = codePostal != null ?
                new ObjectParameter("CodePostal", codePostal) :
                new ObjectParameter("CodePostal", typeof(string));
    
            var villeParameter = ville != null ?
                new ObjectParameter("Ville", ville) :
                new ObjectParameter("Ville", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateAdresse", idAdresseParameter, nomAdresseParameter, numeroParameter, voieParameter, codePostalParameter, villeParameter);
        }
    
        public virtual ObjectResult<string> sp_UpdateClient(Nullable<int> idClient, string nom, string prenom, string email, string telephone, Nullable<bool> type, string password)
        {
            var idClientParameter = idClient.HasValue ?
                new ObjectParameter("IdClient", idClient) :
                new ObjectParameter("IdClient", typeof(int));
    
            var nomParameter = nom != null ?
                new ObjectParameter("Nom", nom) :
                new ObjectParameter("Nom", typeof(string));
    
            var prenomParameter = prenom != null ?
                new ObjectParameter("Prenom", prenom) :
                new ObjectParameter("Prenom", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(bool));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_UpdateClient", idClientParameter, nomParameter, prenomParameter, emailParameter, telephoneParameter, typeParameter, passwordParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
